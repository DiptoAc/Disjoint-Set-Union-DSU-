#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template <typename T>
using oset = tree<T, null_type, less<T>,rb_tree_tag, tree_order_statistics_node_update>;
#define ll long long
#define int long long
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define pb push_back
#define ok cout<<"ok"<<endl<<flush;
#define endl '\n'
#define LLONG_MAX 1e16
const ll M =1e9+7;
const ll N =2e5+1;
void debug(vector<ll>&v){for(auto it:v){cout<<it<<" ";}cout<<endl;}
ll n,m=0;
vector<ll>par(N),sz(N);
ll Find(ll x)
{
    if(par[x]==x){return x;}
    return par[x]=Find(par[x]);
}
void mrg(ll x, ll y)
{
    x=Find(x);
    y=Find(y);
    if(x==y){return;}
    if(sz[x]<sz[y]){swap(x,y);}
    par[y]=x;
    sz[x]+=sz[y];
}
void make(ll x)
{
    par[x]=x;
    sz[x]=1;
}
struct St
{
    ll x,y,weight;
    St(ll a, ll b,ll c)
    {
        x=a;
        y=b;
        weight=c;
    }
    St(){}
};
bool cmp(St a, St b)
{
    return a.weight<b.weight;
}
vector<St>v;
int32_t main()
{
    fast
    ll i,j=1,k=1,p,q,tc=1,cs=0;//cin>>tc;
    while(tc--)
    {
        cin>>n>>m;k=m;
        for(i=1;i<=n;i++){par[i]=i;sz[i]++;}
        while(k--)
        {
            ll x,y,z;
            cin>>x>>y>>z;
            v.pb(St(x,y,z));
        }
        sort(v.begin(),v.end(),cmp);
        ll ans=0,cnt=0;
        for(i=0;i<m;i++)
        {
 
            ll x=v[i].x;
            ll y=v[i].y;
            ll z=v[i].weight;
            ll tx=Find(x);
            ll ty=Find(y);
            //cout<<tx<<" "<<ty<<" "<<z<<endl;
 
            if(tx==ty){continue;}
            ans+=z;
            mrg(tx,ty);
        }
        k=Find(1);
        if(sz[k]!=n){cout<<"IMPOSSIBLE"<<endl;return 0;}
        cout<<ans<<endl;
 
 
    }
}
